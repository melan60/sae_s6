import java.io.*;
import java.net.*;
import java.time.LocalDateTime;
import java.util.Scanner;

/* COMMENTS

   This client allows to test the server by sending two types of requests :
   1 µC_type chipset1 chipset2 ...
   2 type value
   3 type value

   The first request is an autoregister request so that a module with an µC can
   register to the server. It just sends its µC type and a list of chipset that are
   hosted in the module (like a chipset acting as a temperature, voltage, ... sensor)
   If no error occurs, the server sends back OK module_name,module_short_name,module_key
   Name, short name and key are generated by the server (or API depending on accessing the DB
   directly in Java or using the node API)

   The second request and the third are used to store a value of a given type. The server sends back just OK
   Note that req 2 uses a constant module key that correspond to module 2 in DB. Indeed module key
   are long, so it is simpler to fix it.
   The difference between the two reqs is that 2 is used to store a value coming from a µC module, and 3 from an analysis
   server. For the latter, there is no key to provide.

   Examples based on the initial state of the DB (see db.init.js in the WeatherAPI project):
   1 esp32 lm35 bme280
   1 esp8266 lm35
   2 temperature 23.1
   2 pressure 1013
   3 voltage 5
 */

class MainClient  {

	BufferedReader br;
	PrintStream ps;
	Socket sock;
	BufferedReader consoleIn; // to read from keyboard

	String nameUser;

	public MainClient(String serverAddr, int port) throws IOException {

		consoleIn = new BufferedReader(new InputStreamReader(System.in));

		sock = new Socket(serverAddr,port);
		br = new BufferedReader(new InputStreamReader(sock.getInputStream()));
		ps = new PrintStream(sock.getOutputStream());
	}

	public void mainLoop() {

		String req = "";
		boolean stop = false;

		try {
			while(!stop) {
				stop = createUser();
			}
			stop = false;
			// reading requests from keyboard
			while (!stop) {
				System.out.print(nameUser + " [type request]> ");
				req = consoleIn.readLine();
				if (req == null || req.equals("quit")) {
					stop = true;
				}
				else {
					ps.println(req);
					String response = br.readLine();
					System.out.println(response);
				}
			}
		}
		catch(IOException e) {
			System.out.println("cannot communicated with server. Aborting");
		}
	}

	protected boolean createUser() throws IOException{
		String req = "";
		String response = "";
		System.out.println("Saisir les informations de l'utilisateur :");
		String[] list = {"Nom de famille", "Prénom", "Mot de passe", "Email", "Age \n\t\t- Enfant = 1, \n\t\t- Adolescent = 2, \n\t\t- Adulte = 3, \n\t\t- Personne Agée = 4 \n\t", "Sexe (Masculin, Féminin)", "Type (admin, cobaye)"};

		for (String var : list){
			System.out.print("\t * " + var + ": ");
			req = req + " " + consoleIn.readLine();
		}
		System.out.println(req);
		ps.println(req);
		
		response = br.readLine();
		if (response.startsWith("ERR")) {
			System.out.println("error with request create user:" + response);
			return false;
		}
		System.out.println(response);
		String[] res = response.split(" ");
		nameUser = res[1];
		return true;
	}
}
		
